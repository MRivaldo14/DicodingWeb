(()=>{"use strict";const e="https://story-api.dicoding.dev/v1",t={async getStories(){try{const t=localStorage.getItem("token");if(!t)throw new Error("Token tidak ditemukan. Silakan login.");const a=await fetch(`${e}/stories`,{headers:{Authorization:`Bearer ${t}`}});if(!a.ok){const e=await a.json();throw new Error(e.message||"Gagal memuat stories dari API.")}const n=await a.json();if(!Array.isArray(n.listStory))throw new Error("Format data stories tidak valid.");return n.listStory}catch(e){throw console.error("StoryModel.getStories error:",e),e}},async addStory(t){try{const a=localStorage.getItem("token");if(!a)throw new Error("Token tidak ditemukan. Silakan login.");const n=await fetch(`${e}/stories`,{method:"POST",headers:{Authorization:`Bearer ${a}`},body:t});if(!n.ok)return{success:!1,message:(await n.json()).message||"Gagal mengirim story."};const r=await n.json();return{success:!0,message:r.message||"Story berhasil ditambahkan!",data:r.story}}catch(e){return console.error("StoryModel.addStory error:",e),{success:!1,message:e.message||"Terjadi kesalahan saat upload story."}}}},a=(e,t)=>t.some((t=>e instanceof t));let n,r;const o=new WeakMap,s=new WeakMap,i=new WeakMap;let l={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return o.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return u(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function c(e){l=e(l)}function d(e){return"function"==typeof e?(t=e,(r||(r=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(m(this),e),u(this.request)}:function(...e){return u(t.apply(m(this),e))}):(e instanceof IDBTransaction&&function(e){if(o.has(e))return;const t=new Promise(((t,a)=>{const n=()=>{e.removeEventListener("complete",r),e.removeEventListener("error",o),e.removeEventListener("abort",o)},r=()=>{t(),n()},o=()=>{a(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",r),e.addEventListener("error",o),e.addEventListener("abort",o)}));o.set(e,t)}(e),a(e,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,l):e);var t}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const n=()=>{e.removeEventListener("success",r),e.removeEventListener("error",o)},r=()=>{t(u(e.result)),n()},o=()=>{a(e.error),n()};e.addEventListener("success",r),e.addEventListener("error",o)}));return i.set(t,e),t}(e);if(s.has(e))return s.get(e);const t=d(e);return t!==e&&(s.set(e,t),i.set(t,e)),t}const m=e=>i.get(e),p=["get","getKey","getAll","getAllKeys","count"],g=["put","add","delete","clear"],y=new Map;function h(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(y.get(t))return y.get(t);const a=t.replace(/FromIndex$/,""),n=t!==a,r=g.includes(a);if(!(a in(n?IDBIndex:IDBObjectStore).prototype)||!r&&!p.includes(a))return;const o=async function(e,...t){const o=this.transaction(e,r?"readwrite":"readonly");let s=o.store;return n&&(s=s.index(t.shift())),(await Promise.all([s[a](...t),r&&o.done]))[0]};return y.set(t,o),o}c((e=>({...e,get:(t,a,n)=>h(t,a)||e.get(t,a,n),has:(t,a)=>!!h(t,a)||e.has(t,a)})));const f=["continue","continuePrimaryKey","advance"],w={},b=new WeakMap,v=new WeakMap,k={get(e,t){if(!f.includes(t))return e[t];let a=w[t];return a||(a=w[t]=function(...e){b.set(this,v.get(this)[t](...e))}),a}};async function*E(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;const a=new Proxy(t,k);for(v.set(a,t),i.set(a,m(t));t;)yield a,t=await(b.get(a)||t.continue()),b.delete(a)}function S(e,t){return t===Symbol.asyncIterator&&a(e,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===t&&a(e,[IDBIndex,IDBObjectStore])}c((e=>({...e,get:(t,a,n)=>S(t,a)?E:e.get(t,a,n),has:(t,a)=>S(t,a)||e.has(t,a)})));const I="stories",B=function(e,t,{blocked:a,upgrade:n,blocking:r,terminated:o}={}){const s=indexedDB.open(e,t),i=u(s);return n&&s.addEventListener("upgradeneeded",(e=>{n(u(s.result),e.oldVersion,e.newVersion,u(s.transaction),e)})),a&&s.addEventListener("blocked",(e=>a(e.oldVersion,e.newVersion,e))),i.then((e=>{o&&e.addEventListener("close",(()=>o())),r&&e.addEventListener("versionchange",(e=>r(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),i}("story-db",1,{upgrade(e){e.objectStoreNames.contains(I)||e.createObjectStore(I,{keyPath:"id"})}}),D={async saveStories(e){const t=(await B).transaction(I,"readwrite");for(const a of e)t.store.put(a);return t.done},getAllStories:async()=>(await B).getAll(I),saveStory:async e=>(await B).put(I,e),getStoryById:async e=>(await B).get(I,e),deleteStory:async e=>(await B).delete(I,e),clearAllStories:async()=>(await B).clear(I)},T=e=>({loadStories:async()=>{try{const a=await t.getStories();await D.saveStories(a),e.render(a)}catch(t){console.warn("Gagal ambil stories dari API, coba ambil dari IndexedDB...",t);const a=await D.getAllStories();a.length>0?e.render(a):e.render([])}},uploadStory:async a=>{try{const n=await t.addStory(a);if(n.success){e.showUploadSuccess();const a=await t.getStories();await D.saveStories(a),e.render(a)}else e.showUploadError(n.message||"Gagal upload story.")}catch(t){console.error(t),e.showUploadError(t.message||"Terjadi kesalahan saat upload story.")}}}),M={presenter:null,render(e){document.getElementById("app").innerHTML='\n      <section class="container">\n        <h2>Tambah Story</h2>\n        <form id="uploadForm" class="upload-form">\n          <input type="text" name="description" placeholder="Deskripsi..." required class="input-field"/>\n          <input type="file" name="photo" accept="image/*" required class="input-field"/>\n          <button type="submit" class="submit-btn">Upload</button>\n        </form>\n\n        <h2>Daftar Story</h2>\n        <div id="story-list" class="story-list"></div>\n        <div id="map" class="map-container"></div>\n      </section>\n    ';const t=document.getElementById("story-list");if(t.innerHTML="",e.forEach((e=>{const a=document.createElement("article");a.className="story-item";const n=e.photoUrl||(e.photoBlob?URL.createObjectURL(e.photoBlob):"");a.innerHTML=`\n        <div class="story-card">\n          <img src="${n}" alt="Foto dari ${e.name||"User"}" class="story-img"/>\n          <div class="story-content">\n            <h3 class="story-title">${e.name||"User"}</h3>\n            <p class="story-description">${e.description}</p>\n            <small class="story-date">${new Date(e.createdAt).toLocaleString()}</small>\n          </div>\n        </div>\n      `,t.appendChild(a)})),"undefined"!=typeof L){const t=L.map("map").setView([0,0],2);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"Map data Â© OpenStreetMap contributors"}).addTo(t),e.forEach((e=>{e.lat&&e.lon&&L.marker([e.lat,e.lon]).addTo(t).bindPopup(`<strong>${e.name||"User"}</strong><br>${e.description}`)}))}},init(){this.presenter=T(this),this.presenter.loadStories(),document.addEventListener("submit",(e=>{if(e.target&&"uploadForm"===e.target.id){e.preventDefault();const t=new FormData(e.target);this.presenter.uploadStory(t)}}))},showUploadSuccess(){alert("Story berhasil ditambahkan!"),this.presenter.loadStories()},showUploadError(e){alert("Gagal upload story: "+e)}},j={async login(e,t){const a=await fetch("https://story-api.dicoding.dev/v1/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:t})}),n=await a.json();if(n.error)throw new Error(n.message);return n}},A={render(){document.getElementById("app").innerHTML='\n      <section>\n        <h2>Login</h2>\n        <form id="loginForm">\n          <label for="email">Email:</label>\n          <input id="email" type="email" required />\n          \n          <label for="password">Password:</label>\n          <input id="password" type="password" required minlength="8" />\n          \n          <button type="submit">Login</button>\n        </form>\n        <p>Belum punya akun? <a href="#/register">Daftar</a></p>\n      </section>\n    '},init(){const e=(t=this,{loginUser:async(e,a)=>{try{const n=await j.login(e,a);localStorage.setItem("token",n.loginResult.token),t.showSuccessMessage("Login berhasil!")}catch(e){t.showErrorMessage(e.message||"Gagal login.")}}});var t;document.getElementById("loginForm").addEventListener("submit",(t=>{t.preventDefault();const a=document.getElementById("email").value,n=document.getElementById("password").value;e.loginUser(a,n)}))},showSuccessMessage(e){alert(e),location.hash="#/home"},showErrorMessage(e){alert(e)}},P={async register(e,t,a){const n=await fetch("https://story-api.dicoding.dev/v1/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:t,password:a})});if(!n.ok){const{message:e}=await n.json();throw new Error(e)}return await n.json()}},U=async()=>{const e=document.getElementById("app"),t=(a={showSuccessMessage:e=>alert(e),showErrorMessage:e=>alert(e)},{registerUser:async(e,t,n)=>{try{const r=await P.register(e,t,n);r.error?a.showErrorMessage(r.message):(a.showSuccessMessage(r.message),location.hash="#/login")}catch(e){a.showErrorMessage("Terjadi kesalahan saat mendaftar.")}}});var a;e.innerHTML='\n    <h2>Daftar Akun</h2>\n    <form id="registerForm">\n      <label for="name">Nama:</label>\n      <input type="text" id="name" required />\n      <label for="email">Email:</label>\n      <input type="email" id="email" required />\n      <label for="password">Password:</label>\n      <input type="password" id="password" required />\n      <button type="submit">Daftar</button>\n    </form>\n  ',document.getElementById("registerForm").addEventListener("submit",(e=>{e.preventDefault();const a=document.getElementById("name").value,n=document.getElementById("email").value,r=document.getElementById("password").value;t.registerUser(a,n,r)}))},x={async addStory(e){const t=localStorage.getItem("token");if(!t)throw new Error("Autentikasi gagal. Silakan login kembali.");try{const a=await fetch("https://story-api.dicoding.dev/v1/stories",{method:"POST",headers:{Authorization:`Bearer ${t}`},body:e});if(!a.ok){const e=await a.json();throw new Error(e.message||"Gagal menambahkan story.")}return await a.json()}catch(e){throw new Error(e.message||"Terjadi kesalahan jaringan. Silakan coba lagi.")}}},O=async e=>{document.getElementById("app").innerHTML='\n    <section class="add-story">\n      <h2><i class="feather icon-plus-circle"></i> Tambah Story Baru</h2>\n      <form id="storyForm">\n        <label for="description">Deskripsi:</label>\n        <textarea id="description" name="description" placeholder="Masukkan deskripsi..." required></textarea>\n\n        <fieldset>\n          <legend>Ambil Foto dengan Kamera</legend>\n          <div class="camera-wrapper">\n            <video id="video" autoplay playsinline></video>\n            <canvas id="canvas" style="display:none;"></canvas>\n            <button type="button" id="captureBtn" class="btn capture-btn" title="Ambil gambar dari kamera">\n              <i class="feather icon-camera"></i> Ambil Gambar\n            </button>\n            <img id="preview" src="" alt="Pratinjau hasil foto dari kamera" title="Pratinjau foto" class="preview" style="display:none;" />\n          </div>\n        </fieldset>\n\n        <label for="fileUpload">Atau unggah foto dari galeri:</label>\n        <input type="file" id="fileUpload" name="photo" accept="image/*" title="Unggah foto dari galeri" class="input-field" />\n\n        <input type="hidden" id="lat" name="lat">\n        <input type="hidden" id="lon" name="lon">\n\n        <div id="map" class="map-container"></div>\n\n        <button type="submit" class="btn submit-btn">Kirim</button>\n      </form>\n      <a href="#/home" class="back-link">â¬ Kembali</a>\n    </section>\n  ';let t=null,a=null,n=null;const r={showSuccessMessage:e=>{const t=document.querySelector(".add-story"),a=document.createElement("div");a.className="success-banner",a.textContent=e,t.prepend(a),setTimeout((()=>a.remove()),2e3)},showErrorMessage:e=>{const t=document.querySelector(".add-story"),a=document.createElement("div");a.className="error-banner",a.textContent=e,t.prepend(a),setTimeout((()=>a.remove()),2e3)},cleanup:()=>{t&&(t.getTracks().forEach((e=>e.stop())),t=null),n&&(n.off(),n.remove(),n=null),c.removeEventListener("click",m),d.removeEventListener("submit",y),u.removeEventListener("change",p)}},o=(e=>({submitStory:async t=>{try{const a=await x.addStory(t);console.log("AddStoryPresenter:",a),await x.saveStoryOffline(t),e.showSuccessMessage(a.message||"Story berhasil ditambahkan!"),e.cleanup(),setTimeout((()=>{location.hash="#/home"}),300)}catch(t){console.error(t),e.showErrorMessage(t.message||"Terjadi kesalahan saat mengirim story.")}}}))(r),s=document.getElementById("video"),i=document.getElementById("canvas"),l=document.getElementById("preview"),c=document.getElementById("captureBtn"),d=document.getElementById("storyForm"),u=document.getElementById("fileUpload");function m(){i.width=s.videoWidth,i.height=s.videoHeight,i.getContext("2d").drawImage(s,0,0),i.toBlob((e=>{l.src=URL.createObjectURL(e),l.style.display="block",l.blob=e}),"image/jpeg")}function p(e){const t=e.target.files[0];t&&(l.src=URL.createObjectURL(t),l.style.display="block",l.blob=t)}if(navigator.mediaDevices.getUserMedia({video:!0}).then((e=>{t=e,s.srcObject=e})).catch((()=>{alert("Gagal mengakses kamera. Pastikan izinnya diberikan.")})),c.addEventListener("click",m),u.addEventListener("change",p),!document.querySelector('link[href*="leaflet.css"]')){const e=document.createElement("link");e.rel="stylesheet",e.href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css",document.head.appendChild(e)}function g(){n=L.map("map").setView([-6.9,107.6],13),L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"Â© OpenStreetMap contributors"}).addTo(n),n.on("click",(e=>{const{lat:t,lng:r}=e.latlng;document.getElementById("lat").value=t,document.getElementById("lon").value=r,a&&a.remove(),a=L.marker([t,r]).addTo(n)}))}if(window.L)g();else{const e=document.createElement("script");e.src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js",e.onload=g,document.body.appendChild(e)}function y(e){e.preventDefault();const t=document.getElementById("description").value.trim(),a=document.getElementById("lat").value,n=document.getElementById("lon").value,r=l.blob;if(!t)return void alert("Deskripsi harus diisi.");if(!r)return void alert("Ambil atau unggah gambar terlebih dahulu!");const s=new FormData;s.append("description",t),s.append("photo",r),a&&n&&(s.append("lat",a),s.append("lon",n)),o.submitStory(s)}d.addEventListener("submit",y),"function"==typeof e&&e(r.cleanup)},$={async getStoryDetail(e){const t=localStorage.getItem("token"),a=await fetch(`https://story-api.dicoding.dev/v1/stories/${e}`,{headers:{Authorization:`Bearer ${t}`}});if(!a.ok)throw new Error("Gagal memuat detail story (HTTP Error).");const{story:n,error:r,message:o}=await a.json();if(r)throw new Error(o||"Gagal memuat detail story.");return n}},C={render(){document.getElementById("app").innerHTML="<p>Memuat detail cerita...</p>"},init(){},renderDetail(e){if(document.getElementById("app").innerHTML=`\n      <section>\n        <h2>${e.name}</h2>\n        <img src="${e.photoUrl}" alt="Foto oleh ${e.name}" width="300"/>\n        <p>${e.description}</p>\n        <p><strong>Tanggal:</strong> ${new Date(e.createdAt).toLocaleString()}</p>\n        <div id="map" style="height:300px; margin-top:1rem;"></div>\n        <a href="#/home">â¬ Kembali</a>\n      </section>\n    `,e.lat&&e.lon){const t=L.map("map").setView([e.lat,e.lon],13);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"Â© OpenStreetMap contributors"}).addTo(t),L.marker([e.lat,e.lon]).addTo(t).bindPopup(`<b>${e.name}</b><br>${e.description}`).openPopup()}},showErrorMessage(e){document.getElementById("app").innerHTML=`<p style="color:red;">${e}</p>`}};let N=null;async function q(){const e=document.getElementById("app");"function"==typeof N&&(N(),N=null),e.classList.remove("fade-in"),e.classList.add("fade-out"),await new Promise((e=>setTimeout(e,200)));const t=(location.hash||"#/home").split("/");switch(t[1]){case"":case"home":await async function(){M.init();const e=T(M);await e.loadStories()}();break;case"login":await(A.render(),void A.init());break;case"register":await U();break;case"add":await O(F);break;case"story":await async function(e){C.render();const t=(a=C,{loadDetail:async e=>{try{const t=await $.getStoryDetail(e);await D.saveStory(t),a.renderDetail(t)}catch(t){console.warn("Gagal ambil dari API, mencoba ambil dari IndexedDB...",t);const n=await D.getStoryById(e);n?a.renderDetail(n):a.showErrorMessage(t.message||"Gagal memuat detail cerita.")}}});var a;await t.loadDetail(e),C.init()}(t[2]);break;default:document.getElementById("app").innerHTML='\n    <section class="not-found">\n      <h2>404 Not Found</h2>\n      <p>Halaman yang Anda cari tidak ditemukan.</p>\n      <a href="#/home" class="btn btn-primary">Kembali ke Beranda</a>\n    </section>\n  '}!function(){const e=document.getElementById("auth-links"),t=localStorage.getItem("token");e&&(t?(e.innerHTML='<button id="logoutBtn" aria-label="Logout">Logout</button>',document.getElementById("logoutBtn").addEventListener("click",(()=>{localStorage.removeItem("token"),alert("Anda telah logout."),location.hash="#/login"}))):e.innerHTML='\n      <a href="#/login" aria-label="Masuk">Masuk</a> |\n      <a href="#/register" aria-label="Daftar">Daftar</a>\n    ')}(),e.classList.remove("fade-out"),e.classList.add("fade-in")}function F(e){N=e}function H(){"startViewTransition"in document?document.startViewTransition((()=>q())):q()}window.addEventListener("hashchange",H),window.addEventListener("DOMContentLoaded",(()=>{document.getElementById("app").animate([{opacity:0,transform:"translateY(20px)"},{opacity:1,transform:"translateY(0)"}],{duration:400,easing:"ease-in-out",fill:"forwards"}),H(),function(){const e=document.querySelector("#main-content"),t=document.querySelector(".skip-link");e&&t&&t.addEventListener("click",(a=>{a.preventDefault(),t.blur(),e.setAttribute("tabindex","-1"),e.focus(),e.scrollIntoView({behavior:"smooth"})}))}(),async function(){if("serviceWorker"in navigator&&"PushManager"in window)try{await navigator.serviceWorker.register("/service-worker.js"),console.log("â Service worker terdaftar");const e=await navigator.serviceWorker.ready;if("granted"!==await Notification.requestPermission())return void console.warn("â Notifikasi ditolak oleh pengguna");const t=function(){const e=("BIDIsn5pkD5WXwKtrN_38kUzJs8JOwJlgSsDTtdNnnevAPY-_LzvhgtV_DrbUy55oKJoAPdg42zkfNrbeyVR7I0"+"=".repeat(1)).replace(/-/g,"+").replace(/_/g,"/"),t=atob(e);return new Uint8Array([...t].map((e=>e.charCodeAt(0))))}(),a=await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t});console.log("â Berhasil subscribe:",a),await async function(e){try{const t=await fetch("http://localhost:4000/subscribe",{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}});if(!t.ok)throw new Error(`Gagal mengirim subscription: ${t.status}`);console.log("â Subscription berhasil dikirim ke server")}catch(e){console.warn("â Error kirim subscription:",e.message)}}(a)}catch(e){console.error("â Error saat register SW atau Push:",e)}else console.warn("â Browser tidak mendukung Service Worker atau Push Notification")}()}))})();